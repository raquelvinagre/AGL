group templates;

program(statements) ::= <<
import math
import tkinter as tk
import sys 
import os
# Root Creation
root = tk.Tk()

# Global variable to help with the wait_variable func
global helper_var
helper_var = tk.BooleanVar()
helper_var.set(False)

def on_mouse_click(event, point):
    point[0] = event.x
    point[1] = event.y

    if helper_var.get() == False:
        helper_var.set(True)
    else:
        helper_var.set(False)


def refresh_view(canvas,delay):
    canvas.update_idletasks()
    canvas.update()
    root.after(delay)


def move_obj(x, y, canvas, obj):
    if obj != canvas:
        canvas.move(obj, x, y)
    else:
        scroll_region = canvas.cget("scrollregion")
        scroll_region_x1 = float(scroll_region.split(" ")[0])
        scroll_region_y1 = float(scroll_region.split(" ")[1])
        scroll_region_x2 = float(scroll_region.split(" ")[2])
        scroll_region_y2 = float(scroll_region.split(" ")[3])
        canvas.configure(scrollregion=(scroll_region_x1 + x, scroll_region_y1 + y, scroll_region_x2 + x, scroll_region_y2 + y))


<statements>

root.mainloop()
>>

viewDeclaration(viewName, properties, title) ::= <<
<viewName> = tk.Canvas(root, <properties>)
<viewName>.pack(fill="both", expand=True)
height = int(<viewName>.cget("height"))
width = int(<viewName>.cget("width"))
<viewName>.configure(scrollregion=(-width/2,-height/2, width/2, height/2))
<viewName>.xview_moveto(.5)
<viewName>.yview_moveto(.5)
root.title(<title>) 

>>

scriptDeclaration(filepath, filename) ::= <<
xagl.xaglMain.main(<filepath>, "<filename>")
>>

scriptInput(scriptName, filepath, scriptSource) ::= <<
<scriptName> = <filepath>
userInput = input(<scriptSource>+"\n")
f = open(<filepath>, "w")
splitUserInput = <userInput>.split(";")
for i, text in enumerate(<splitUserInput>):
    f.write(<text>)
f.close()

>>

playCommand(scriptName, scriptVars) ::= <<
from xagl.<scriptName> import <scriptName>

<scriptName>(<scriptVars>)
>>


variableDeclaration(varName, value) ::= <<
<varName> = <value>
>>

objectInstantiation(objectType, coords, properties, viewName) ::= <<
<viewName>.create_<objectType>(<coords><if(properties)>, <properties><endif>)
>>

modelInstantiation(modelName, properties, components, position) ::= <<
<components>

>>

objectUpdate(viewName, objectName, properties) ::= <<
<viewName>.itemconfig(<objectName>, <properties>)
>>

propertyAssignment(propertyName, value, viewName) ::= <<
<propertyName>= <value>
>>

propertyUpdate(varName, propertyName, value, viewName) ::= <<
<viewName>.itemconfig(<varName>, <propertyName>=<value>)
>>

variableUpdate(varName, value, viewName) ::= <<
<viewName>.itemconfig(<varName> = <value>)
>>

printStatement(value) ::= <<
print(<value>)
>>

moveCommand(viewName, objectName, dx, dy) ::= <<
move_obj(<dx>,<dy>,<viewName>,<objectName>)
>>

refreshCommand(viewName, delay) ::= <<
refresh_view(<viewName>, <delay>)
>>

waitCommand(viewName, point) ::= <<
root.bind("\<Button-1\>", lambda event: on_mouse_click(event, <point>))
root.wait_variable(helper_var)
>>

waitCommandInstantiation(viewName, point) ::= <<
<point> =[0,0]
root.bind("\<Button-1\>", lambda event: on_mouse_click(event, <point>))
root.wait_variable(helper_var)
>>

closeCommand(viewName) ::= <<
<viewName>.destroy()
root.destroy()
>>

loopDeclaration(varName, loopRange, body) ::= <<

for <varName> in <loopRange>:
    <body>

>>

whileLoop(condition, body) ::= <<

while <condition>:
    <body>

>>

conditionalStatement(condition, ifBody, elseIfClauses, elseBody) ::= <<
if <condition>:
    <ifBody>
<elseIfClauses>
else:
    <elseBody>

>>

elseIfClause(condition, body) ::= <<
elif <condition>:
    <body>

>>

listDeclaration(listName, elements) ::= <<
<listName> = [<elements>]

>>

listElementAssignment(listName, index, value) ::= <<
<listName>[<index>] = <value>

>>

listElementAccess(listName, index) ::= <<
<listName>[<index>]

>>